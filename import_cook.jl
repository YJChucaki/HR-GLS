
using Gmsh, Statistics

function import_fem(filename::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()

    elements["Œ©"] = getElements(nodes,entities["Œ©"])
    elements["Œ©·µç"] = getElements(nodes,entities["Œ©"],8)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"],normal=true)
    elements["Œì·µç"] = getElements(nodes,entities["Œì·µç"],normal=true)
    elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"],normal=true)

    push!(elements["Œ©"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œì·µó"],:ùù≠)
    push!(elements["Œì·µç"],:ùù≠)
    push!(elements["Œì ≥"],:ùù≠)

    gmsh.finalize()

    set‚àáùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©·µç"])
    setùù≠!(elements["Œì·µó"])
    setùù≠!(elements["Œì·µç"])
    setùù≠!(elements["Œì ≥"])

    return elements, nodes
end

function import_linear_mix(filename1::String,filename2::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 2.5*s*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

    integrationOrder_Œ© = 3
    integrationOrder_Œ©·µç = 8
    integrationOrder_Œì = 2

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    elements["Œ©·µò"] = getElements(nodes,entities["Œ©"], integrationOrder_Œ©)
    elements["Œ©·µç·µò"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    elements["‚àÇŒ©·µò"] = getElements(nodes, entities["Œì"],   integrationOrder_Œì, normal = true)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"], integrationOrder_Œì, normal = true)
    elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"], integrationOrder_Œì, normal = true)
    elements["Œì·µç·µò"] = getElements(nodes,entities["Œì·µç"], integrationOrder_Œì, normal = true)

    push!(elements["Œ©·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùù≠)
    push!(elements["Œì·µó"],:ùù≠)
    push!(elements["Œì ≥"],:ùù≠)
    push!(elements["Œì·µç·µò"],:ùù≠)

    set‚àáùù≠!(elements["Œ©·µò"])
    setùù≠!(elements["‚àÇŒ©·µò"])
    set‚àáùù≠!(elements["Œ©·µç·µò"])
    setùù≠!(elements["Œì·µó"])
    setùù≠!(elements["Œì ≥"])
    setùù≠!(elements["Œì·µç·µò"])

    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type, integrationOrder_Œ©, sp)
    elements["‚àÇŒ©·µñ"] = getElements(nodes_p, entities["Œì"], type, integrationOrder_Œì, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"],type,  integrationOrder_Œì, sp, normal = true)

    n‚Çò = 6
    ùó† = zeros(n‚Çò)
    ‚àÇùó†‚àÇx = zeros(n‚Çò)
    ‚àÇùó†‚àÇy = zeros(n‚Çò)
    push!(elements["Œ©·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µñ"], :ùù≠)
    push!(elements["Œì·µç·µñ"], :ùù≠)
    push!(elements["Œ©·µñ"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["‚àÇŒ©·µñ"], :ùó†=>ùó†)
    push!(elements["Œì·µç·µñ"], :ùó†=>ùó†)
    push!(elements["Œ©·µç·µñ"], :ùù≠)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†)

    set‚àáùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["‚àÇŒ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç·µñ"])

    # types = PiecewisePolynomial{:Constant}
    types = PiecewisePolynomial{:Linear2D}
    elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], types, integrationOrder_Œ©)
    elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], types, integrationOrder_Œì)
    elements["Œì·µçÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    push!(elements["Œ©À¢"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©À¢"], :ùù≠)

    set‚àáùù≠!(elements["Œ©À¢"])
    setùù≠!(elements["‚àÇŒ©À¢"])

    typeb = PiecewiseParametric{:Bubble,:Tri3}
    elements["Œ©·µá"] = getPiecewiseElements(entities["Œ©"],typeb,integrationOrder_Œ©)
    push!(elements["Œ©·µá"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    set‚àáùù≠!(elements["Œ©·µá"])

    gmsh.finalize()

    return elements, nodes, nodes_p, sp, type
end

function import_HR_GLS(filename1::String,filename2::String,n)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_c = getùëø·µ¢()
    

    elements["Œ©"] = getElements(nodes_c,entities["Œ©"])
    push!(elements["Œ©"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    set‚àáùù≠!(elements["Œ©"])


    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    Œ© = getElements(nodes, entities["Œ©"])
    # s, varùê¥ = cal_area_support(Œ©)
    # s·µ§ = 1.5*s*ones(length(nodes))

    s = 2.5
    s‚ÇÅ = s*44.0/n*ones(length(nodes))
    s‚ÇÇ = s*44.0/n*ones(length(nodes))
    push!(nodes,:s‚ÇÅ=>s‚ÇÅ,:s‚ÇÇ=>s‚ÇÇ,:s‚ÇÉ=>s‚ÇÇ)
    
    integrationOrder_Œ© = 4
    integrationOrder_Œ©·µç = 8
    integrationOrder_Œì = 4

    # type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Cubic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x,y,z,n = 3,Œ≥ = 5)
    elements["Œ©·µò"] = getElements(nodes,entities["Œ©"], type,  integrationOrder_Œ©, sp)
    elements["Œ©·µç·µò"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©·µç, sp)
    elements["‚àÇŒ©·µò"] = getElements(nodes, entities["Œì"], type,   integrationOrder_Œì, sp, normal = true)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"], type, integrationOrder_Œì, sp, normal = true)
    # elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì·µç·µò"] = getElements(nodes,entities["Œì·µç"], type, integrationOrder_Œì, sp, normal = true)
    
    
    n‚Çò = 21
    ùó† = zeros(n‚Çò)
    ‚àÇùó†‚àÇx = zeros(n‚Çò)
    ‚àÇùó†‚àÇy = zeros(n‚Çò)
    push!(elements["Œ©·µò"],:ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µò"],:ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùù≠)
    push!(elements["Œì·µó"],:ùù≠)
    # push!(elements["Œì ≥"],:ùù≠)
    push!(elements["Œì·µç·µò"],:ùù≠)

    push!(elements["Œ©·µò"],  :ùó†=>ùó†,:‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µò"], :ùó†=>ùó†,:‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùó†=>ùó†)
    push!(elements["Œì·µó"],:ùó†=>ùó†)
    # push!(elements["Œì ≥"],:ùó†=>ùó†)
    push!(elements["Œì·µç·µò"],:ùó†=>ùó†)

    set‚àáùù≠!(elements["Œ©·µò"])
    # set‚àá¬≤ùù≠!(elements["Œ©·µò"])
    setùù≠!(elements["‚àÇŒ©·µò"])
    set‚àáùù≠!(elements["Œ©·µç·µò"])
    setùù≠!(elements["Œì·µó"])
    # setùù≠!(elements["Œì ≥"])
    setùù≠!(elements["Œì·µç·µò"])


    # gmsh.open(filename2)
    # types = PiecewisePolynomial{:Constant}
    # types = PiecewisePolynomial{:Linear2D}
    types = PiecewisePolynomial{:Quadratic2D}
    elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], types, integrationOrder_Œ©)
    elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], types, integrationOrder_Œì)
    elements["Œì·µçÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    
    push!(elements["Œ©À¢"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy, :‚àÇ¬≤ùù≠‚àÇx¬≤, :‚àÇ¬≤ùù≠‚àÇy¬≤, :‚àÇ¬≤ùù≠‚àÇx‚àÇy)
    push!(elements["‚àÇŒ©À¢"], :ùù≠)

    set‚àáùù≠!(elements["Œ©À¢"])
    # set‚àá¬≤ùù≠!(elements["Œ©À¢"])
    setùù≠!(elements["‚àÇŒ©À¢"])

    return elements, nodes, sp, type, Œ©, nodes_c
end

function import_MF_Gauss(filename1::String,n)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    

    elements["Œ©C"] = getElements(nodes,entities["Œ©"])
    push!(elements["Œ©C"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    set‚àáùù≠!(elements["Œ©C"])
    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    
    x = nodes.x
    y = nodes.y
    z = nodes.z
    Œ© = getElements(nodes, entities["Œ©"])
    
    s = 2.5
    s‚ÇÅ = s*44.0/n*ones(length(nodes))
    s‚ÇÇ = s*44.0/n*ones(length(nodes))
    push!(nodes,:s‚ÇÅ=>s‚ÇÅ,:s‚ÇÇ=>s‚ÇÇ,:s‚ÇÉ=>s‚ÇÇ)
  
  
    
    integrationOrder_Œ© = 7
    integrationOrder_Œ©·µç = 8
    integrationOrder_Œì = 7

    # type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Cubic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x,y,z,n = 3,Œ≥ = 5)
    elements["Œ©"] = getElements(nodes,entities["Œ©"], type,  integrationOrder_Œ©, sp)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©·µç, sp)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì·µç"] = getElements(nodes,entities["Œì·µç"], type, integrationOrder_Œì, sp, normal = true)
    
    # elements["Œ©"] = getElements(nodes,entities["Œ©"],   integrationOrder_Œ©)
    # elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    # elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"],  integrationOrder_Œì, normal = true)
    # elements["Œì·µç"] = getElements(nodes,entities["Œì·µç"],  integrationOrder_Œì, normal = true)
    
    n‚Çò = 21
    ùó† = zeros(n‚Çò)
    ‚àÇùó†‚àÇx = zeros(n‚Çò)
    ‚àÇùó†‚àÇy = zeros(n‚Çò)
    push!(elements["Œ©"],:ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç"],:ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œì·µó"],:ùù≠)
    push!(elements["Œì·µç"],:ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)

    push!(elements["Œ©"], :ùó†=>ùó†,:‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç"], :ùó†=>ùó†,:‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œì·µó"],:ùó†=>ùó†)
    push!(elements["Œì·µç"],:ùó†=>ùó†,:‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)

    set‚àáùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©·µç"])
    setùù≠!(elements["Œì·µó"])
    setùù≠!(elements["Œì·µç"])



    return elements, nodes, sp, type
end
function import_HR_GLS_MPP(filename1::String,filename2::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    nodes_p = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    Œ© = getElements(nodes, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)

    s·µ§ = 2.5*s*ones(length(nodes)) 
    s‚Çö = 2.5*s*ones(length(nodes))
    push!(nodes,:s‚ÇÅ=>s·µ§,:s‚ÇÇ=>s·µ§,:s‚ÇÉ=>s·µ§)
    push!(nodes_p,:s‚ÇÅ=>s‚Çö,:s‚ÇÇ=>s‚Çö,:s‚ÇÉ=>s‚Çö)

    integrationOrder_Œ© = 4
    integrationOrder_Œ©·µç = 8
    integrationOrder_Œì = 4
    integrationOrder_R = 4
    # type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x,y,z,n = 3,Œ≥ = 5)
    elements["Œ©·µò"] = getElements(nodes,entities["Œ©"], type,  integrationOrder_Œ©, sp)
    elements["Œ©·µç·µò"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©·µç, sp)
    elements["‚àÇŒ©·µò"] = getElements(nodes, entities["Œì"], type,   integrationOrder_Œì, sp, normal = true)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"], type, integrationOrder_Œì, sp, normal = true)
    # elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì·µç·µò"] = getElements(nodes,entities["Œì·µç"], type, integrationOrder_Œì, sp, normal = true)
    
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    elements["Œ©·µò·µñ"] = getElements(nodes_p,entities["Œ©"], type,  integrationOrder_Œ©, sp)
    elements["Œ©·µç·µò·µñ"] = getElements(nodes_p, entities["Œ©"], type, integrationOrder_Œ©·µç, sp)
    elements["‚àÇŒ©·µò·µñ"] = getElements(nodes_p, entities["Œì"], type,   integrationOrder_Œì, sp, normal = true)
    elements["Œì·µó·µñ"] = getElements(nodes_p,entities["Œì·µó"], type, integrationOrder_Œì, sp, normal = true)
    # elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì·µç·µò·µñ"] = getElements(nodes_p,entities["Œì·µç"], type, integrationOrder_Œì, sp, normal = true)
    




    n‚Çò = 21
    ùó† = zeros(n‚Çò)
    ‚àÇùó†‚àÇx = zeros(n‚Çò)
    ‚àÇùó†‚àÇy = zeros(n‚Çò)
    push!(elements["Œ©·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùù≠)
    push!(elements["Œì·µó"],:ùù≠)
    # push!(elements["Œì ≥"],:ùù≠)
    push!(elements["Œì·µç·µò"],:ùù≠)

    push!(elements["Œ©·µò"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µò"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùó†=>ùó†)
    push!(elements["Œì·µó"],:ùó†=>ùó†)
    # push!(elements["Œì ≥"],:ùó†=>ùó†)
    push!(elements["Œì·µç·µò"],:ùó†=>ùó†)

    set‚àáùù≠!(elements["Œ©·µò"])
    setùù≠!(elements["‚àÇŒ©·µò"])
    set‚àáùù≠!(elements["Œ©·µç·µò"])
    setùù≠!(elements["Œì·µó"])
    # setùù≠!(elements["Œì ≥"])
    setùù≠!(elements["Œì·µç·µò"])

    push!(elements["Œ©·µò·µñ"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µò·µñ"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µò·µñ"],:ùù≠)
    push!(elements["Œì·µó·µñ"],:ùù≠)
    # push!(elements["Œì ≥"],:ùù≠)
    push!(elements["Œì·µç·µò·µñ"],:ùù≠)

    push!(elements["Œ©·µò·µñ"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µò·µñ"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["‚àÇŒ©·µò·µñ"],:ùó†=>ùó†)
    push!(elements["Œì·µó·µñ"],:ùó†=>ùó†)
    # push!(elements["Œì ≥"],:ùó†=>ùó†)
    push!(elements["Œì·µç·µò·µñ"],:ùó†=>ùó†)

    set‚àáùù≠!(elements["Œ©·µò·µñ"])
    setùù≠!(elements["‚àÇŒ©·µò·µñ"])
    set‚àáùù≠!(elements["Œ©·µç·µò·µñ"])
    setùù≠!(elements["Œì·µó·µñ"])
    # setùù≠!(elements["Œì ≥"])
    setùù≠!(elements["Œì·µç·µò·µñ"])



    gmsh.open(filename2)
    
    # types = PiecewisePolynomial{:Constant}
    types = PiecewisePolynomial{:Linear2D}
    # types = PiecewisePolynomial{:Quadratic2D}
    elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], types, integrationOrder_Œ©)
    elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], types, integrationOrder_Œì)
    elements["Œì·µçÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    
    
    # type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    # # sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    # elements["Œ©·µñ"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©, sp)
    # elements["‚àÇŒ©·µñ"] = getElements(nodes, entities["Œì"], type, integrationOrder_Œì, sp)
    # elements["Œ©·µç·µñ"] = getElements(nodes, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes, entities["Œì·µç"],type,  integrationOrder_Œì, sp, normal = true)
    # typep = PiecewisePolynomial{:Constant}
    typep = PiecewisePolynomial{:Linear2D}
    # typep = PiecewisePolynomial{:Quadratic2D}
    elements["Œ©·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["Œ©·µç·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["‚àÇŒ©·µñ"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], typep, integrationOrder_Œì)
    elements["Œì·µç·µñ"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©·µñ"])
    
    typep = PiecewisePolynomial{:Linear2D}
    # typep = PiecewisePolynomial{:Constant}

    elements["Œ©·µñ·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["Œ©·µç·µñ·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["‚àÇŒ©·µñ·µñ"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], typep, integrationOrder_Œì)
    elements["Œì·µç·µñ·µñ"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©·µñ"])
   
    push!(elements["Œ©À¢"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©À¢"], :ùù≠)



    
    # n‚Çò = 6
    # ùó† = zeros(n‚Çò)
    # ‚àÇùó†‚àÇx = zeros(n‚Çò)
    # ‚àÇùó†‚àÇy = zeros(n‚Çò)
    # push!(elements["Œ©·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    # push!(elements["‚àÇŒ©·µñ"], :ùù≠)
    # push!(elements["Œì·µç·µñ"], :ùù≠)
    # push!(elements["Œ©·µñ"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # push!(elements["‚àÇŒ©·µñ"], :ùó†=>ùó†)
    # push!(elements["Œì·µç·µñ"], :ùó†=>ùó†)
    # push!(elements["Œ©·µç·µñ"], :ùù≠)
    # push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†)

    push!(elements["Œ©·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µñ"], :ùù≠)

    
    push!(elements["Œ©·µñ·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µñ·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µñ·µñ"], :ùù≠)
    # push!(elements["Œì·µç·µñ"], :ùù≠)

    set‚àáùù≠!(elements["Œ©À¢"])
    setùù≠!(elements["‚àÇŒ©À¢"])


    set‚àáùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["‚àÇŒ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç·µñ"])

    
    set‚àáùù≠!(elements["Œ©·µñ·µñ"])
    setùù≠!(elements["‚àÇŒ©·µñ·µñ"])
    setùù≠!(elements["Œ©·µç·µñ·µñ"])
    setùù≠!(elements["Œì·µç·µñ·µñ"])
    
    typeb = PiecewiseParametric{:Bubble,:Tri3}
    elements["Œ©·µá"] = getPiecewiseElements(entities["Œ©"],typeb,integrationOrder_Œ©)
    push!(elements["Œ©·µá"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    set‚àáùù≠!(elements["Œ©·µá"])

    # gmsh.finalize()

    return elements, nodes, sp, type, Œ©
end

function import_HR_reduced(filename1::String,filename2::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    Œ© = getElements(nodes, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 2.5*s*ones(length(nodes))
    push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
    
    gmsh.open(filename2)
    integrationOrder_Œ© = 3
    integrationOrder_Œ©·µç = 8
    integrationOrder_Œì = 3
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x,y,z,n = 3,Œ≥ = 5)
    elements["Œ©·µò"] = getElements(nodes,entities["Œ©"], type,  integrationOrder_Œ©, sp)
    elements["Œ©·µç·µò"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©·µç, sp)
    elements["‚àÇŒ©·µò"] = getElements(nodes, entities["Œì"], type,   integrationOrder_Œì, sp, normal = true)
    elements["Œì·µó"] = getElements(nodes,entities["Œì·µó"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì ≥"] = getElements(nodes,entities["Œì ≥"], type, integrationOrder_Œì, sp, normal = true)
    elements["Œì·µç·µò"] = getElements(nodes,entities["Œì·µç"], type, integrationOrder_Œì, sp, normal = true)
    
    n‚Çò = 21
    ùó† = zeros(n‚Çò)
    ‚àÇùó†‚àÇx = zeros(n‚Çò)
    ‚àÇùó†‚àÇy = zeros(n‚Çò)
    push!(elements["Œ©·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µò"],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùù≠)
    push!(elements["Œì·µó"],:ùù≠)
    push!(elements["Œì ≥"],:ùù≠)
    push!(elements["Œì·µç·µò"],:ùù≠)

    push!(elements["Œ©·µò"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µò"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["‚àÇŒ©·µò"],:ùó†=>ùó†)
    push!(elements["Œì·µó"],:ùó†=>ùó†)
    push!(elements["Œì ≥"],:ùó†=>ùó†)
    push!(elements["Œì·µç·µò"],:ùó†=>ùó†)

    set‚àáùù≠!(elements["Œ©·µò"])
    setùù≠!(elements["‚àÇŒ©·µò"])
    set‚àáùù≠!(elements["Œ©·µç·µò"])
    setùù≠!(elements["Œì·µó"])
    setùù≠!(elements["Œì ≥"])
    setùù≠!(elements["Œì·µç·µò"])



    
    
    types = PiecewisePolynomial{:Constant}
    # types = PiecewisePolynomial{:Linear2D}
    elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], types, integrationOrder_Œ©)
    elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], types, integrationOrder_Œì)
    elements["Œì·µçÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    
    
    # type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    # # sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    # elements["Œ©·µñ"] = getElements(nodes, entities["Œ©"], type, integrationOrder_Œ©, sp)
    # elements["‚àÇŒ©·µñ"] = getElements(nodes, entities["Œì"], type, integrationOrder_Œì, sp)
    # elements["Œ©·µç·µñ"] = getElements(nodes, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes, entities["Œì·µç"],type,  integrationOrder_Œì, sp, normal = true)
    # typep = PiecewisePolynomial{:Constant}
    # typep = PiecewisePolynomial{:Linear2D}
    typep = PiecewisePolynomial{:Quadratic2D}
    elements["Œ©·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["Œ©·µç·µñ"] = getPiecewiseElements(entities["Œ©"], typep, integrationOrder_Œ©)
    elements["‚àÇŒ©·µñ"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], typep, integrationOrder_Œì)
    elements["Œì·µç·µñ"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©·µñ"])
   
    push!(elements["Œ©À¢"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©À¢"], :ùù≠)



    
    # n‚Çò = 6
    # ùó† = zeros(n‚Çò)
    # ‚àÇùó†‚àÇx = zeros(n‚Çò)
    # ‚àÇùó†‚àÇy = zeros(n‚Çò)
    # push!(elements["Œ©·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    # push!(elements["‚àÇŒ©·µñ"], :ùù≠)
    # push!(elements["Œì·µç·µñ"], :ùù≠)
    # push!(elements["Œ©·µñ"],  :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # push!(elements["‚àÇŒ©·µñ"], :ùó†=>ùó†)
    # push!(elements["Œì·µç·µñ"], :ùó†=>ùó†)
    # push!(elements["Œ©·µç·µñ"], :ùù≠)
    # push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†)

    push!(elements["Œ©·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    push!(elements["‚àÇŒ©·µñ"], :ùù≠)
    # push!(elements["Œì·µç·µñ"], :ùù≠)

    set‚àáùù≠!(elements["Œ©À¢"])
    setùù≠!(elements["‚àÇŒ©À¢"])


    set‚àáùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["‚àÇŒ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç·µñ"])
    
    typeb = PiecewiseParametric{:Bubble,:Tri3}
    elements["Œ©·µá"] = getPiecewiseElements(entities["Œ©"],typeb,integrationOrder_Œ©)
    push!(elements["Œ©·µá"], :ùù≠, :‚àÇùù≠‚àÇx, :‚àÇùù≠‚àÇy)
    set‚àáùù≠!(elements["Œ©·µá"])

    # gmsh.finalize()

    return elements, nodes, sp, type
end

function cal_area_support(elms::Vector{ApproxOperator.AbstractElement})
    ùê¥s = zeros(length(elms))
    for (i,elm) in enumerate(elms)
        x‚ÇÅ = elm.ùìí[1].x
        y‚ÇÅ = elm.ùìí[1].y
        x‚ÇÇ = elm.ùìí[2].x
        y‚ÇÇ = elm.ùìí[2].y
        x‚ÇÉ = elm.ùìí[3].x
        y‚ÇÉ = elm.ùìí[3].y
        ùê¥s[i] = 0.5*(x‚ÇÅ*y‚ÇÇ + x‚ÇÇ*y‚ÇÉ + x‚ÇÉ*y‚ÇÅ - x‚ÇÇ*y‚ÇÅ - x‚ÇÉ*y‚ÇÇ - x‚ÇÅ*y‚ÇÉ)
    end
    avgùê¥ = mean(ùê¥s)
    varùê¥ = var(ùê¥s)
    s = (4/3^0.5*avgùê¥)^0.5
    return s, varùê¥
end
